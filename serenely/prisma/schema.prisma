generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String           @unique
  password        String
  emailVerified   DateTime?
  image           String?
  role            Role             @default(USER)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  accounts        Account[]
  sessions        Session[]
  therapyEntries  TherapyEntry[]
  therapyMessages TherapyMessage[]
  posts           Post[]  
  comments        Comment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TherapyMessage {
  id        String      @id @default(cuid())
  userId    String
  role      MessageRole
  content   String
  createdAt DateTime    @default(now())
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TherapyEntry {
  id        String   @id @default(cuid())
  userId    String
  title     String
  entryDate DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Therapist {
  id        String   @id @default(uuid())
  name      String
  address   String
  email     String   @unique
  createdAt DateTime @default(now())
}

model Post {
  id        String   @id @default(cuid())
  userId    String
  content   String
  imageUrl  String?
  reactions String[]
  comments  Comment[]
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  content   String             
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
enum Role {
  USER
  ADMIN
}

enum MessageRole {
  user
  assistant
  system
}
